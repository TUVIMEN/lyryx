#!/usr/bin/env python3
# by Dominik Stanisław Suchora <suchora.dominik7@gmail.com>
# License: GNU GPLv3

import sys
import os
import re
import time
import argparse
import requests
from lxml import html

session = requests.Session()
session.headers.update({'User-Agent':'Mozilla/5.0 (X11; Linux x86_64; rv:101.0) Gecko/20100101 Firefox/101.0','Accept-Encoding':'gzip, deflate'})

request_wait = None

azlyrics_domain = "https://www.azlyrics.com"
tekstowo_domain = 'https://www.tekstowo.pl'
lyricsjonk_domain = 'https://lyricsjonk.com'
mojim_domain = "https://mojim.com"
genius_domain = 'https://genius.com'

def get_req(url):
    resp = session.get(url)

    if request_wait:
        time.sleep(request_wait)

    if resp.status_code == 404:
        print("{} page not found".format(url),file=sys.stderr)
        return None

    if resp.status_code != 200:
        print("{} error getting page".format(url),file=sys.stderr)
        return None

    return resp

def get_html(url,check_robots):
    resp = get_req(url)
    if resp == None:
        return None

    r = html.fromstring(resp.text)
    if check_robots != None and check_robots(r):
        print("{} robots detected".format(url),file=sys.stderr)
        return None
    return r

def get_json(url):
    resp = get_req(url)
    if resp == None:
        return None

    return resp.json()

def lyryx_name_from_url(url,delim):
    url = re.sub(r'.*'+delim,'',url)
    url = re.sub(r'\.html$','',url)
    return url.translate(str.maketrans('_','-'))

def lyryx_field_process(field):
    return field.strip().lower().translate(str.maketrans('','',',.()[]{}"\'+/\\&@!?#%^*'))

def lyryx_field_floored(field):
    return re.sub(r'_+','_',lyryx_field_process(field).translate(str.maketrans(' -','__')))

def lyryx_field_dashed(field):
    return re.sub(r'-+','-',lyryx_field_process(field).translate(str.maketrans(' _','--')))

def lyryx_field_merged(field):
    return lyryx_field_process(field).translate(str.maketrans('','',' -_'))

def azlyrics_robots(r):
    if len(r.xpath('//b[contains(text(),"Our systems have detected unusual activity from your IP address (computer network)")]/text()')):
        return True
    return False

def get_azlyrics_title(url):
    page = get_html(url,azlyrics_robots)
    if page == None:
        return
    name = page.xpath('//div[contains(@class,"text-center")]/b/text()')
    if len(name) == 0:
        return
    name = lyryx_field_dashed(name[0])
    if os.path.exists(name):
        print("{} file already exists".format(name),file=sys.stderr)
        return
    print(name)

    lyrics = page.xpath('//div[contains(@class,"text-center")]/div[5]/text()')[1:]

    with open(name,"w") as file:
        file.write(''.join(lyrics))

def get_azlyrics_artist(url):
    print(url)
    page = get_html(url,azlyrics_robots)
    if page == None:
        return
    for i in page.xpath('//a[contains(@href,"/lyrics/")]/@href'):
        get_azlyrics_title('{}{}'.format(azlyrics_domain,i))


def get_azlyrics(artist,album,title):
    if artist == '':
        print("azlyrics: artist not specified",file=sys.stderr)
        return
    artist = lyryx_field_merged(artist)
    if title == '':
        link = "{}/{}/{}.html".format(azlyrics_domain,artist[0],artist)
        get_azlyrics_artist(link)
    else:
        title = lyryx_field_merged(title)
        get_azlyrics_title("{}/lyrics/{}/{}.html".format(azlyrics_domain,artist,title))

def get_tekstowo_title(url):
    print(url)
    name = lyryx_name_from_url(url,r',')
    if os.path.exists(name):
        print("{} file already exists".format(name),file=sys.stderr)
        return
    print(name)
    page = get_html(url,None)
    if page == None:
        return

    lyrics = page.xpath('//div[@id="songText"]//div[@class="inner-text"]/text()')
    lyrics.append('\n')

    with open(name,"w") as file:
        file.write(''.join(lyrics))

def get_tekstowo_artist(url):
    print(url)
    while True:
        page = get_html(url,None)
        if page == None:
            return

        for i in page.xpath('//div[@class="flex-group"]//a[@class="title"]/@href'):
            get_tekstowo_title("{}{}".format(tekstowo_domain,i))

        url = page.xpath('//a[contains(@title,"Następna ")]/@href')
        if len(url) == 0:
            break
        url = "{}{}".format(tekstowo_domain,url)
        nextpage = nextpage[0]

def get_tekstowo(artist,album,title):
    if artist == '':
        print("tekstowo: artist not specified",file=sys.stderr)
        return
    artist = lyryx_field_floored(artist)
    if title == '':
        pagenumber = 1
        nextpage = '/piosenki_artysty,{},alfabetycznie,strona,{}.html'.format(artist,pagenumber)
        get_tekstowo_artist(tekstowo_domain + nextpage)
    else:
        title = lyryx_field_floored(title)
        get_tekstowo_title("{}/piosenka,{},{}.html".format(tekstowo_domain,artist,title))

def get_lyricsjonk_title(url):
    print(url)
    name = lyryx_name_from_url(url,r'/')
    if os.path.exists(name):
        print("{} file already exists".format(name),file=sys.stderr)
        return
    print(name)
    page = get_html(url,None)
    if page == None:
        return

    lyrics = page.xpath('//div[@class="hvdivcontent"]/text()')

    out = ''
    for i in lyrics:
        out += i.strip() + '\n'

    with open(name,"w") as file:
        file.write(out)

def get_lyricsjonk_artist(url):
    page = get_html(url,None);
    if page == None:
        return
    for i in page.xpath('//ul[@class="centerlist"]//a[@title]/@href'):
        get_lyricsjonk_title("{}{}".format(lyricsjonk_domain,i))


def get_lyricsjonk(artist,album,title):
    if artist == '':
        print("lyricsjonk: artist not specified",file=sys.stderr)
        return

    artist = lyryx_field_dashed(artist);

    if title == '':
        get_lyricsjonk_artist("{}/artistdetail/{}".format(lyricsjonk_domain,artist))
    else:
        title = lyryx_field_dashed(title);
        get_lyricsjonk_title("{}/{}-{}.html".format(lyricsjonk_domain,artist,title))

def get_genius_title(url):
    print(url)
    page = get_html(url,None)
    if page == None:
        return
    name = page.xpath('//span[contains(@class,"SongHeaderdesktop__")]/text()')
    if len(name) == 0:
        return
    name = lyryx_field_dashed(name[0])
    if os.path.exists(name):
        print("{} file already exists".format(name),file=sys.stderr)
        return
    print(name)

    lyrics = page.xpath('//div[contains(@class,"Lyrics__Container-")]/text()')
    out = ''
    for index, i in enumerate(lyrics):
        if index != 0 and i[0] == '[':
            out += '\n'
        out += i + '\n'

    with open(name,"w") as file:
        file.write(out)

def genius_id_process(id):
    id = re.sub(r'&.*','',id)
    return re.sub(r'.*=','',id)

def get_genius_album(url):
    page = get_html(url,None)
    if page == None:
        return
    for i in page.xpath('//div[@class="chart_row-content"]//a[@class="u-display_block"]/@href'):
        get_genius_title(i)

def get_genius_artist(url):
    page = get_html(url,None)
    if page == None:
        return

    artist_id = page.xpath('//a[contains(@href,"/albums?") and @class="full_width_button"]/@href')
    if len(artist_id) == 0:
        return
    artist_id = genius_id_process(artist_id[0])
    if len(artist_id) == 0:
        return

    albums_link = "{}/api/artists/{}/albums".format(genius_domain,artist_id)
    albums = get_json(albums_link)
    if albums == None:
        return

    for i in albums['response']['albums']:
        get_genius_album(i['url'])

def get_genius(artist,album,title):
    if artist == '':
        print("genius: artist not specified",file=sys.stderr)
        return

    artist = lyryx_field_dashed(artist);

    if album != '':
        album = lyryx_field_dashed(album)
        get_genius_album("{}/albums/{}/{}".format(genius_domain,artist,album))
    elif title != '':
        title = lyryx_field_dashed(title)
        get_genius_title("{}/{}-{}-lyrics".format(genius_domain,artist,title))
    else:
        get_genius_artist("{}/artists/{}".format(genius_domain,artist))

def mojim_artistid_process(artist):
    f = ord(artist[0])
    s = ord(artist[1])
    o = 0
    if f >= 97 and f <= 122:
        if s == 32:
            o = 581+f
        else:
            o = ((f-97)*26)+(s-96)
    else:
        if f >= 48 and f <= 57:
            o = 677
        else:
            o = 709
    return "%02d" % o

def mojim_title_search(page,title):
    title = lyryx_field_dashed(title)

    for i in page.xpath('//dd[@class="hb2" or @class="hb3"]//span[@class="hc3" or @class="hc4"]//a[not(@target)]'):
        name = i.xpath('./text()')
        if len(name) == 0:
            continue
        name = lyryx_field_dashed(name[0])
        if title == name:
            return "{}{}".format(mojim_domain,i.xpath('./@href')[0])
    return None

def get_mojim_title(url):
    print(url)
    page = get_html(url,None)
    if page == None:
        return

    name = page.xpath('//dt[@id="fsZx2"]/text()')
    if len(name) == 0:
        return
    name = lyryx_field_dashed(name[0])
    if os.path.exists(name):
        print("{} file already exists".format(name),file=sys.stderr)
        return
    print(name)

    lyrics = page.xpath('//dd[@id="fsZx3"]/text()')
    out = ''
    for i in lyrics:
        out += i + '\n'

    with open(name,"w") as file:
        file.write(out)

def mojim_artist_search(artist):
    if artist == '':
        print("mojim: artist not specified",file=sys.stderr)
        return None

    artist = lyryx_field_dashed(artist)

    artistid = mojim_artistid_process(artist)
    link = "{}/uszlhe1_{}.htm".format(mojim_domain,artistid)
    page = get_html(link,None)
    if page == None:
        return None

    artist_link = []

    for i in page.xpath('//ul[@class="s_listA"]//a'):
        name = i.xpath('./text()')
        if len(name) == 0:
            name = i.xpath('./strong/text()')
        if len(name) == 0:
            continue
        name = lyryx_field_dashed(name[0])
        if artist == name:
            artist_link = i.xpath('./@href')
            break

    if len(artist_link) == 0:
        return None

    return "{}{}".format(mojim_domain,artist_link[0])

def mojim_search_album(page,album):
    album = lyryx_field_dashed(album)
    album_link = []

    for i in page.xpath('//dd[@class="hb2" or @class="hb3"]//span[@class="hc1"]//a'):
        name = i.xpath('./text()')
        if len(name) == 0:
            continue
        name = lyryx_field_dashed(name[0])
        if album == name:
            album_link = i.xpath('./@href')
            break

    if len(album_link) == 0:
        return None

    return "{}{}".format(mojim_domain,album_link[0])

def get_mojim_album(url):
    print(url)
    page = get_html(url,None)
    if page == None:
        return

    for i in page.xpath('//table[@border and not(class)]//a[contains(@href,"/usy")]/@href'):
        get_mojim_title("{}{}".format(mojim_domain,i))

def get_mojim_artist(url,ishtml=False):
    page = url
    if ishtml is False:
        print(url)
        page = get_html(url,None)
        if page == None:
            return

    for i in page.xpath('//dd[@class="hb2" or @class="hb3"]//span[@class="hc3" or @class="hc4"]//a[not(@target)]/@href'):
        get_mojim_title(mojim_domain+i)

def get_mojim(artist,album,title):
    artist_link = mojim_artist_search(artist)
    if artist_link == None:
        return
    print(artist_link)
    page = get_html(artist_link,None)
    if page == None:
        return

    if album != '':
        album_link = mojim_search_album(page,album)
        if album_link == None:
            return
        get_mojim_album(album_link)
    else:
        if title != '':
            title_link = mojim_title_search(page,title)
            if title_link == None:
                return
            get_mojim_title(title_link)
        else:
            get_mojim_artist(page,ishtml=True)

lyrics_sources = {
    'azlyrics': get_azlyrics,
    'tekstowo': get_tekstowo,
    'lyricsjonk': get_lyricsjonk,
    'genius': get_genius,
    'mojim': get_mojim
}

def valid_source(source):
    try:
        return lyrics_sources[source]
    except:
        raise argparse.ArgumentTypeError('source "{}" does not exist'.format(source))

def valid_directory(directory):
    try:
        return os.chdir(directory)
    except:
        raise argparse.ArgumentTypeError('couldn\'t change directory to "{}"'.format(directory))

def get_argparser():
    parser = argparse.ArgumentParser()

    parser.add_argument(
        '-d',
        '--directory',
        metavar='DIR',
        type=valid_directory,
        help='Change directory to DIR'
    )
    parser.add_argument(
        '-w',
        '--wait',
        metavar='SECONDS',
        type=float,
        help='Sets waiting time for each request to SECONDS'
    )
    parser.add_argument(
        '-S',
        '--sources-list',
        action='store_true',
        help='Prints list of sources with their description'
    )
    parser.add_argument(
        '-s',
        '--source',
        metavar='SOURCE',
        type=valid_source,
        help='Specifies lyrics source'
    )
    parser.add_argument(
        '-a',
        '--artist',
        metavar='ARTIST',
        type=str,
        help='Specifies artist of the song'
    )
    parser.add_argument(
        '-A',
        '--album',
        metavar='ALBUM',
        type=str,
        help='Specifies album of the song'
    )
    parser.add_argument(
        '-t',
        '--title',
        metavar='TITLE',
        type=str,
        help='Specifies title of the song'
    )

    return parser

def main():
    args = get_argparser().parse_args(sys.argv[1:] if sys.argv[1:] else ['-h'])

    source = get_genius

    if args.sources_list:
        print("""\
azlyrics    --artist,--title
genius      --artist,--album,--title
mojim       --artist,--album,--title
tekstowo    --artist,--title
lyricsjonk  --artist,--title""")
        return

    if args.source is not None:
        source = args.source

    global request_wait
    request_wait = args.wait if args.wait else None
    artist = args.artist if args.artist else ''
    album = args.album if args.album else ''
    title = args.title if args.title else ''

    source(artist,album,title)

if __name__ == "__main__":
    main()

#!/usr/bin/env python3
# by Dominik Stanisław Suchora <suchora.dominik7@gmail.com>
# License: GNU GPLv3

import sys
import os
import re
import time
import random
import argparse

import requests
from lxml import html

session = requests.Session()
session.headers.update(
    {
        "User-Agent": "Mozilla/5.0 (X11; Linux x86_64; rv:101.0) Gecko/20100101 Firefox/101.0",
        "Accept-Encoding": "gzip, deflate",
    }
)

request_wait = None
request_wait_random = None
directory_artist = False
pedantic = False
logger = True


class LyryxException(Exception):
    pass


class RequestError(LyryxException):
    pass


class PageNotFound(LyryxException):
    pass


class RobotsDetected(LyryxException):
    pass


RequestErrors = (RequestError, PageNotFound, RobotsDetected)


def mkdir_and_chdir(name):
    if os.path.exists(name):
        if logger:
            print("{} already exists".format(name), file=sys.stderr)
    else:
        try:
            os.mkdir(name)
        except:
            if logger:
                print("couldn't create {} directory".format(name), file=sys.stderr)
            return True
    try:
        os.chdir(name)
    except:
        if logger:
            print('couldn\'t change directory to "{}"'.format(name), file=sys.stderr)
        return True
    return False


def get_req(url):
    try:
        resp = session.get(url)
    except Exception:
        raise RequestError(url)

    if request_wait:
        time.sleep(request_wait)
    if request_wait_random:
        time.sleep(random.randint(0, request_wait_random + 1) / 1000)

    if resp.status_code == 404:
        raise PageNotFound(url, "page not found")

    if resp.status_code not in [200, 301, 302, 303, 304, 307, 308]:
        raise RequestError(url, "error getting page")

    return resp


def get_html(url, check_robots):
    resp = get_req(url)

    r = html.fromstring(resp.text)
    if check_robots and check_robots(r):
        raise RobotsDetected(url, "robots detected")
    return r


def get_json(url):
    return get_req(url).json()


class Site:
    def __init__(self):
        self.domain = ""

    @staticmethod
    def robots(resp):
        return False

    def get_html(self, url):
        return get_html(url, self.robots)

    def name_from_url(self, url, delim):
        url = re.sub(r".*" + delim, "", url)
        url = re.sub(r"\.html$", "", url)
        url = url.translate(str.maketrans("_", "-"))
        url = re.sub(r"-+", "-", url)
        url = re.sub(r"^-", "", url)
        return re.sub(r"-$", "", url)

    def field_process(self, field):
        return (
            field.strip()
            .lower()
            .translate(str.maketrans("", "", "`’”,.()[]{}\"'+/\\&@!?#%^*:"))
        )

    def field_floored(self, field):
        return re.sub(
            r"_+", "_", self.field_process(field).translate(str.maketrans(" -", "__"))
        )

    def field_dashed(self, field):
        return re.sub(
            r"-+", "-", self.field_process(field).translate(str.maketrans(" _", "--"))
        )

    def field_merged(self, field):
        return self.field_process(field).translate(str.maketrans("", "", " -_"))

    def get_handle_error(self, url, name):
        func = getattr(self, name)
        try:
            return func(url)
        except RequestErrors as ex:
            if pedantic:
                raise ex
            if logger:
                print(*ex.args)
            return

    def artist(self, url):
        return self.get_handle_error(url, "get_artist")

    def get_artist(self, url):
        pass

    def album(self, url):
        return self.get_handle_error(url, "get_album")

    def get_album(self, url):
        pass

    def title(self, url):
        return self.get_handle_error(url, "get_title")

    def get_title(self, url):
        pass

    def get(self, artist, album, title):
        pass


class azlyrics(Site):
    def __init__(self):
        super().__init__()

        self.domain = "https://www.azlyrics.com"

    @staticmethod
    def robots(resp):
        if len(
            resp.xpath(
                '//b[contains(text(),"Our systems have detected unusual activity from your IP address (computer network)")]/text()'
            )
        ):
            return True
        return False

    def get_title(self, url):
        page = self.get_html(url)
        name = page.xpath('//div[contains(@class,"text-center")]/b/text()')
        if len(name) == 0:
            return
        name = self.field_dashed(name[0])
        if os.path.exists(name):
            print("{} file already exists".format(name), file=sys.stderr)
            return
        print(name)

        lyrics = page.xpath('//div[contains(@class,"text-center")]/div[5]/text()')[1:]
        for i, line in enumerate(lyrics):
            lyrics[i] = line.strip() + "\n"

        with open(name, "w") as file:
            file.write("".join(lyrics))

    def get_artist(self, url):
        print(url)
        page = self.get_html(url)

        if directory_artist:
            name = page.xpath("//h1/strong/text()")
            if len(name) == 0:
                return
            name = self.field_dashed(re.sub(r" Lyrics$", "", name[0]))
            if mkdir_and_chdir(name):
                return

        for i in page.xpath('//a[contains(@href,"/lyrics/")]/@href'):
            self.title("{}{}".format(self.domain, i))

    def get(self, artist, album, title):
        if album != "":
            print("azlyrics: album field is not supported", file=sys.stderr)
            return
        artist = self.field_merged(artist)
        if title == "":
            link = "{}/{}/{}.html".format(self.domain, artist[0], artist)
            self.artist(link)
        else:
            title = self.field_merged(title)
            self.title("{}/lyrics/{}/{}.html".format(self.domain, artist, title))


class tekstowo(Site):
    def __init__(self):
        super().__init__()

        self.domain = "https://www.tekstowo.pl"

    def get_title(self, url):
        print(url)
        name = self.name_from_url(url, r",")
        if os.path.exists(name):
            print("{} file already exists".format(name), file=sys.stderr)
            return
        print(name)
        page = self.get_html(url)

        lyrics = page.xpath('//div[@id="songText"]//div[@class="inner-text"]/text()')
        for i, line in enumerate(lyrics):
            lyrics[i] = line.strip() + "\n"

        with open(name, "w") as file:
            file.write("".join(lyrics))

    def artist_name_from_url(self, url):
        name = re.sub(r"^.*/piosenki_artysty,([^,]+)(,.*|\.html)$", r"\1", url).lower()
        return self.field_dashed(name)

    def get_artist(self, url):
        print(url)
        name = None
        while True:
            page = self.get_html(url)

            if directory_artist and name is None:
                name = self.artist_name_from_url(url)
                if len(name) == 0 or mkdir_and_chdir(name):
                    return

            for i in page.xpath('//div[@class="flex-group"]//a[@class="title"]/@href'):
                self.title("{}{}".format(self.domain, i))

            url = page.xpath('//a[contains(@title,"Następna ")]/@href')
            if len(url) == 0:
                break
            url = "{}{}".format(self.domain, url[0])

    def get(self, artist, album, title):
        if album != "":
            print("tekstowo: album field is not supported", file=sys.stderr)
            return
        artist = self.field_floored(artist)
        if title == "":
            pagenumber = 1
            nextpage = "/piosenki_artysty,{},alfabetycznie,strona,{}.html".format(
                artist, pagenumber
            )
            self.artist(self.domain + nextpage)
        else:
            title = self.field_floored(title)
            self.title("{}/piosenka,{},{}.html".format(self.domain, artist, title))


class lyricsjonk(Site):
    def __init__(self):
        super().__init__()

        self.domain = "https://lyricsjonk.com"

    def get_title(self, url):
        print(url)
        name = self.name_from_url(url, r"/")
        if os.path.exists(name):
            print("{} file already exists".format(name), file=sys.stderr)
            return
        print(name)
        page = self.get_html(url)

        lyrics = page.xpath('//div[@class="hvdivcontent"]/text()')

        out = ""
        for i in lyrics:
            out += i.strip() + "\n"

        with open(name, "w") as file:
            file.write(out)

    def get_artist(self, url):
        page = self.get_html(url)

        if directory_artist:
            name = self.name_from_url(url, "/")
            if len(name) == 0 or mkdir_and_chdir(name):
                return

        for i in page.xpath('//ul[@class="centerlist"]//a[@title]/@href'):
            self.title("{}{}".format(self.domain, i))

    def get(self, artist, album, title):
        if album != "":
            print("lyricsjonk: album field is not supported", file=sys.stderr)
            return
        artist = self.field_dashed(artist)

        if title == "":
            self.artist("{}/artistdetail/{}".format(self.domain, artist))
        else:
            title = self.field_dashed(title)
            self.title("{}/{}-{}.html".format(self.domain, artist, title))


class genius(Site):
    def __init__(self):
        super().__init__()

        self.domain = "https://genius.com"

    def lyrics_r(self, prevt, nodes, lyrics):
        t = prevt
        for i in nodes:
            if isinstance(i, str):
                t += i
            elif isinstance(i, html.HtmlElement):
                if i.tag == "br":
                    lyrics.append(t)
                    t = ""
                else:
                    t = self.lyrics_r(t, i.xpath("node()"), lyrics)
        return t

    def lyrics(self, page):
        lyrics = []
        last_line = self.lyrics_r(
            "",
            page.xpath(
                '//div[starts-with(@class,"Lyrics__Container-sc-") and contains(@class,"-1 ") and contains(@data-lyrics-container,"true")]/node()'
            ),
            lyrics,
        )
        lyrics.append(last_line)

        out = ""
        for index, i in enumerate(lyrics):
            if index != 0 and len(i) and i[0] == "[" and out[-2:] != "\n\n":
                out += "\n"
            out += i + "\n"
        return out

    def get_title(self, url):
        print(url)
        page = self.get_html(url)
        name = page.xpath(
            '//span[starts-with(@class,"SongHeader-desktop__HiddenMask-sc-") and contains(@class,"-11 ")]/text()'
        )
        if len(name) == 0:
            return
        name = self.field_dashed(name[0])
        if os.path.exists(name):
            print("{} file already exists".format(name), file=sys.stderr)
            return
        print(name)

        out = self.lyrics(page)

        with open(name, "w") as file:
            file.write(out)

    def process_id(self, p_id):
        p_id = re.sub(r"&.*", "", p_id)
        return re.sub(r".*=", "", p_id)

    def get_album(self, url):
        page = self.get_html(url)
        for i in page.xpath(
            '//div[@class="chart_row-content"]//a[@class="u-display_block"]/@href'
        ):
            self.title(i)

    def artist_name_from_url(self, url):
        name = re.sub(r"^.*/", "", url)
        return name.lower().translate(str.maketrans(",_", "--"))

    def get_artist(self, url):
        page = self.get_html(url)

        artist_id = page.xpath(
            '//a[contains(@href,"/songs?") and @class="full_width_button"]/@href'
        )
        if len(artist_id) == 0:
            return

        artist_id = self.process_id(artist_id[0])
        if len(artist_id) == 0:
            return

        songs_link = "{}/api/artists/{}/songs?sort=popularity&page=".format(
            self.domain, artist_id
        )
        next_page = 1

        if directory_artist:
            name = self.artist_name_from_url(url)
            if mkdir_and_chdir(name):
                return

        while next_page is not None:
            songs_link_n = songs_link + str(next_page)
            print(songs_link_n)
            songs = get_json(songs_link_n)
            for i in songs["response"]["songs"]:
                self.title(i["url"])
            next_page = songs["response"]["next_page"]

    def get(self, artist, album, title):
        artist = self.field_dashed(artist)

        if album != "":
            album = self.field_dashed(album)
            self.album("{}/albums/{}/{}".format(self.domain, artist, album))
        elif title != "":
            title = self.field_dashed(title)
            self.title("{}/{}-{}-lyrics".format(self.domain, artist, title))
        else:
            self.artist("{}/artists/{}".format(self.domain, artist))


class mojim(Site):
    def __init__(self):
        super().__init__()

        self.domain = "https://mojim.com"

    def artistid_process(self, artist):
        f = ord(artist[0])
        s = ord(artist[1])
        o = 0
        if f >= 97 and f <= 122:
            if s == 32:
                o = 581 + f
            else:
                o = ((f - 97) * 26) + (s - 96)
        else:
            if f >= 48 and f <= 57:
                o = 677
            else:
                o = 709
        return "%02d" % o

    def title_search(self, page, title):
        title = self.field_dashed(title)

        for i in page.xpath(
            '//dd[@class="hb2" or @class="hb3"]//span[@class="hc3" or @class="hc4"]//a[not(@target)]'
        ):
            name = i.xpath("./text()")
            if len(name) == 0:
                continue
            name = self.field_dashed(name[0])
            if title == name:
                return "{}{}".format(self.domain, i.xpath("./@href")[0])
        return

    def get_title(self, url):
        print(url)
        page = self.get_html(url)

        name = page.xpath('//dt[@id="fsZx2"]/text()')
        if len(name) == 0:
            return
        name = self.field_dashed(name[0])
        if os.path.exists(name):
            print("{} file already exists".format(name), file=sys.stderr)
            return
        print(name)

        lyrics = page.xpath('//dd[@id="fsZx3"]/text()')
        out = ""
        for i in lyrics:
            out += i + "\n"

        with open(name, "w") as file:
            file.write(out)

    def artist_search(self, artist):
        artist = self.field_dashed(artist)

        artistid = self.artistid_process(artist)
        link = "{}/uszlhe1_{}.htm".format(self.domain, artistid)
        page = self.get_html(link)

        artist_link = []

        for i in page.xpath('//ul[@class="s_listA"]//a'):
            name = i.xpath("./text()")
            if len(name) == 0:
                name = i.xpath("./strong/text()")
            if len(name) == 0:
                continue
            name = self.field_dashed(name[0])
            if artist == name:
                artist_link = i.xpath("./@href")
                break

        if len(artist_link) == 0:
            return

        return "{}{}".format(self.domain, artist_link[0])

    def search_album(self, page, album):
        album = self.field_dashed(album)
        album_link = []

        for i in page.xpath(
            '//dd[@class="hb2" or @class="hb3"]//span[@class="hc1"]//a'
        ):
            name = i.xpath("./text()")
            if len(name) == 0:
                continue
            name = self.field_dashed(name[0])
            if album == name:
                album_link = i.xpath("./@href")
                break

        if len(album_link) == 0:
            return

        return "{}{}".format(self.domain, album_link[0])

    def get_album(self, url):
        print(url)
        page = self.get_html(url)

        for i in page.xpath(
            '//table[@border and not(class)]//a[contains(@href,"/usy")]/@href'
        ):
            self.title("{}{}".format(self.domain, i))

    def get_artist(self, url, ishtml=False):
        page = url
        if ishtml is False:
            print(url)
            page = self.get_html(url)

        if directory_artist:
            name = page.xpath('//a[@class="X3"]/span[last()]/text()')
            if len(name) == 0:
                return
            name = self.field_dashed(re.sub(r"\(.*$", "", name[-1]))
            if mkdir_and_chdir(name):
                return

        for i in page.xpath(
            '//dd[@class="hb2" or @class="hb3"]//span[@class="hc3" or @class="hc4"]//a[not(@target)]/@href'
        ):
            self.title(self.domain + i)

    def get(self, artist, album, title):
        artist_link = self.artist_search(artist)
        print(artist_link)
        page = self.get_html(artist_link)

        if album != "":
            album_link = self.search_album(page, album)
            self.album(album_link)
        else:
            if title != "":
                title_link = self.title_search(page, title)
                self.title(title_link)
            else:
                self.artist(page, ishtml=True)


lyrics_sources = {
    "azlyrics": azlyrics().get,
    "tekstowo": tekstowo().get,
    "lyricsjonk": lyricsjonk().get,
    "genius": genius().get,
    "mojim": mojim().get,
}


def valid_source(source):
    try:
        return lyrics_sources[source]
    except:
        raise argparse.ArgumentTypeError('source "{}" does not exist'.format(source))


def valid_directory(directory):
    try:
        return os.chdir(directory)
    except:
        raise argparse.ArgumentTypeError(
            'couldn\'t change directory to "{}"'.format(directory)
        )


def get_argparser():
    parser = argparse.ArgumentParser()

    parser.add_argument(
        "lyrics",
        metavar="LYRICS|URL",
        type=str,
        nargs="*",
        help='Specifies the input lyrics in "artist|album", "artist||title" or "artist" formats or as url to the source',
    )

    parser.add_argument(
        "-d",
        "--directory",
        metavar="DIR",
        type=valid_directory,
        help="Change directory to DIR",
    )
    parser.add_argument(
        "-w",
        "--wait",
        metavar="SECONDS",
        type=float,
        help="Sets waiting time for each request to SECONDS",
    )
    parser.add_argument(
        "-W",
        "--wait-random",
        metavar="MILISECONDS",
        type=int,
        help="Sets random waiting time for each request to be at max MILISECONDS",
    )
    parser.add_argument(
        "-S",
        "--sources-list",
        action="store_true",
        help="Prints list of sources with their description",
    )
    parser.add_argument(
        "-s",
        "--source",
        metavar="SOURCE",
        type=valid_source,
        help="Specifies lyrics source",
    )
    parser.add_argument(
        "--directory-artist",
        action="store_true",
        help="Create directory for every artist",
    )

    return parser


def get_lyrics(source, lyrics):
    fields = ["", "", ""]
    for j, g in enumerate(lyrics.split("|")[0:3]):
        fields[j] = g
    if fields[0] == "":
        print('"{}" - artist field has to be specified', file=sys.stderr)
        return
    if fields[1] != "" and fields[2] != "":
        print(
            '"{}" - album and title cannot be specified together'.format(j),
            file=sys.stderr,
        )
        return
    source(*fields)


def get_url(url):
    formats = {
        (
            r"https?://www\.tekstowo\.pl/piosenki_artysty,[a-zA-Z0-9_]+\.html",
            tekstowo().artist,
        ),
        (
            r"https?://www\.tekstowo\.pl/piosenka,[a-zA-Z0-9_]+,[a-zA-Z0-9_]+\.html",
            tekstowo().title,
        ),
        (
            r"https?://www\.azlyrics\.com/([a-zA-Z0-9_+-])/\1[a-zA-Z0-9_+-]+.html(#.*)?",
            azlyrics().artist,
        ),
        (
            r"https?://www\.azlyrics\.com/lyrics/[a-zA-Z0-9_+-]+/[a-zA-Z0-9_+-]+.html",
            azlyrics().title,
        ),
        (
            r"https?://lyricsjonk\.com/artistdetail/[a-zA-Z0-9-._,]+",
            lyricsjonk().artist,
        ),
        (r"https?://lyricsjonk\.com/[a-zA-Z0-9-._,]+\.html", lyricsjonk().artist),
        (r"https?://genius\.com/[a-zA-Z0-9-,._]+-lyrics", genius().title),
        (
            r"https?://genius\.com/albums/[a-zA-Z0-9-,._]+/[a-zA-Z0-9-,._]+",
            genius().album,
        ),
        (r"https?://genius\.com/artists/[a-zA-Z0-9-,._]+", genius().artist),
        (r"https?://mojim\.com/ush[0-9]+\.htm", mojim().artist),
        (r"https?://mojim\.com/us[0-9]+x[0-9]+\.htm", mojim().album),
        (r"https?://mojim\.com/usy[0-9]+x[0-9]+x[0-9]+\.htm", mojim().title),
    }

    for i in formats:
        if re.fullmatch(i[0], url):
            i[1](url)
            return
    print("{} - unknown format".format(url), file=sys.stderr)


def get_lyryx(source, lyrics):
    pwd = os.getcwd()
    for i in lyrics:
        if re.match(r"^https?://([a-zA-Z0-9-]+\.)+[a-zA-Z]+/", i):
            get_url(i)
        else:
            get_lyrics(source, i)
        if pwd != os.getcwd():
            try:
                os.chdir(pwd)
            except:
                print(
                    'couldn\'t change directory to "{}"'.format(name), file=sys.stderr
                )
                return


def main():
    args = get_argparser().parse_args(sys.argv[1:] if sys.argv[1:] else ["-h"])

    source = genius().get

    if args.sources_list:
        print(
            """\
azlyrics    artist                  artist||title
genius      artist  artist|album    artist||title
mojim       artist  artist|album    artist||title
tekstowo    artist                  artist||title
lyricsjonk  artist                  artist||title"""
        )
        return

    if len(args.lyrics) == 0:
        return

    if args.source is not None:
        source = args.source

    global request_wait
    request_wait = args.wait if args.wait else None
    global request_wait_random
    request_wait_random = args.wait_random if args.wait_random else None

    global directory_artist
    directory_artist = args.directory_artist

    get_lyryx(source, args.lyrics)


if __name__ == "__main__":
    main()
